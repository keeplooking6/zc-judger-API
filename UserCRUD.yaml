swagger: "2.0"
info:
  description: "ZC-OJ-Swagger"
  version: "1.0.0"
  title: "Swagger Petstore"
host: "127.0.0.1"
basePath: "/zc-oj-api"
schemes:
- "https"
- "http"
consumes:
  - application/x-www-from-urlencoded
  - mutipart/form-data
  - application/json
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "创建用户"
      description: "创建用户"
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - in: "body"
          name: "user"
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        "400":
          description: "用户名已存在"
          schema:
            $ref: "#/definitions/NoDataResponse"
    put:
      tags:
      - "user"
      summary: "更新用户"
      description: "修改用户信息"
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "query"
        name: "id"
        required: true
        type: "integer"
        description: "要更新的用户id"
      - in: "query"
        name: "userName"
        required: false
        type: "string"
      - in: "query"
        name: "password"
        required: false
        type: "string"
        description: "要更新的用户密码"
      - in: "query"
        name: "email"
        required: false
        type: "string"
        description: "要更新的用户邮箱"
      - in: "query"
        name: "phone"
        required: false
        type: "string"
        description: "要更新的用户密码"
      - in: "query"
        name: "studentNo"
        required: false
        type: "string"
        description: "要更新的用户学号"
      - in: "query"
        name: "isDisable"
        required: false
        type: "string"
        description: "要更新的用户状态"
      - in: "query"
        name: "avatar"
        required: false
        type: "string"
        description: "要更新的用户头像"
      - in: "query"
        name: "sessionKey"
        required: false
        type: "string"
        description: "要更新的用户sessionKey"
      - in: "query"
        name: "role"
        required: false
        type: "string"
        description: "要更新的用户角色"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        "400":
          description: "用户请求信息有误"
          schema:
            $ref: "#/definitions/NoDataResponse"
    get:
      tags:
      - "user"
      summary: "查找所有或某些类型的用户"
      description: "查找所有或某些类型的用户"
      operationId: "getUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "roleId"
        in: "query"
        description: "根据用户角色不同来筛选用户"
        required: false
        type: "integer"
      responses:
        "200":
          description: "查找成功"
          schema:
            $ref: "#/definitions/UserResponse"
        "400":
          description: "传参不合法"
          schema:
            $ref: "#/definitions/ErrorResponseOne"
        "404":
          description: "没有找到该用户"
          schema:
            $ref: "#/definitions/ErrorResponseThree"
    delete:
      tags:
      - "user"
      summary: "注销用户"
      description: "注销用户"
      operationId: "deleteUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "userId"
        in: "query"
        description: "要注销的用户id"
        required: true
        type: "integer"
      responses:
        "200":
          description: "注销成功"
          schema:
            $ref: "#/definitions/SuccessResponse"
        "400":
          description: "注销失败"
          schema:
            $ref: "#/definitions/FailureResponse"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "通过id找到用户"
      description: "返回一个用户"
      operationId: "getUserById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "userId"
        in: "path"
        description: "使用id查找某用户"
        required: true
        type: "integer"
      responses:
        "200":
          description: "查找成功"
          schema:
            $ref: "#/definitions/UserResponse"
        "400":
          description: "提供的参数不合法"
          schema:
            $ref: "#/definitions/ErrorResponseOne"
        "404":
          description: "未找到用户"
          schema:
            $ref: "#/definitions/ErrorResponseThree"
  /login: 
    post:
      tags:
      - "login"
      summary: "登录"
      description: "登录"
      operationId: "login"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "userName"
        in: "query"
        description: "用户名"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "密码"
        required: true
        type: "string"
      responses:
        "200":
          description: "登录成功"
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: "传参不合法"
          schema:
            $ref: "#/definitions/ErrorResponseOne"
        "401":
          description: "密码不正确"
          schema:
            $ref: "#/definitions/ErrorResponseTwo"
        "404":
          description: "没有找到该用户"
          schema:
            $ref: "#/definitions/ErrorResponseThree"
  /register:
    post:
      tags:
      - "register"
      summary: "用户注册"
      description: "用户注册"
      operationId: "userRegister"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
       -  in: "body"
          name: "user"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserResponse"
        "400":
          description: "用户名已存在"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NoDataResponse"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userName:
        type: "string"
      password:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      studentNo:
        type: "string"
      isDisable:
        type: "boolean"
      createAt:
        type: "string"
        format: "date-time"
      role:
        $ref: "#/definitions/Role"
      avatar:
        type: "string"
      sessionKey:
        type: "string"
  Submit:
    type: "object"
    properties:
      submitId:
        type: "integer"
        format: "int64"
      problemId:
        type: "integer"
        format: "int64"
      submitTime:
        type: "string"
      submitCode:
        type: "string"
      userId:
        type: "integer"
        format: "int64"
      submitSpace:
        type: "string"
      submitRuntime:
        type: "integer"
        format: "int64"
      submitState:
        type: "string"
      submitLanguage:
        type: "string"
      submitLength:
        type: "integer"
        format: "int64"
      submitEffective:
        type: "string"
      submitGrade:
        type: "string"
  FindUserName:
    type: "object"
    properties:
      userName:
        type: "string"
  Role:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "integer"
  LoginResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      message:
        type: "string"
      data:
        type: "object"
        $ref: "#/definitions/Role"
  UserResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      message:
        type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/User"
  NoDataResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      message:
        type: "string"
      data:
        type: "object"
  FindUserNameResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      message:
        type: "string"
      data:
        type: "object"
        $ref: "#/definitions/FindUserName"
  ErrorResponseOne:
    type: "object"
    properties:
      code:
        type: "integer"
      message: 
        type: "string"
        $ref: "#/components/responses/InvalidParameters"
  ErrorResponseTwo:
    type: "object"
    properties:
      code:
        type: "integer"
      message: 
        type: "string"
        $ref: "#/components/responses/PasswordError"
  ErrorResponseThree:
    type: "object"
    properties:
      code:
        type: "integer"
      message: 
        type: "string"
        $ref: "#/components/responses/NotFound"
  SuccessResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      message:
        type: "string"
        $ref: "#/components/responses/Success"
  FailureResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      message: 
        type: "string"
        $ref: "#/components/responses/Failure"
components:
  responses:
    InvalidParameters:
      description: "invalid parameters"
    PasswordError:
      description: "password error"
    NotFound:
      description: "not found"
    Success:
      description: "operate successfully"
    Failure:
      description: "operate failure"
